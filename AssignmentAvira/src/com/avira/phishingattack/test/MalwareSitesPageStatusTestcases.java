package com.avira.phishingattack.test;

import java.util.concurrent.TimeUnit;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Test;

import com.avira.base.setup.BaseSetUpClass;

/**
 * Test class file for checking the web page navigated by users is
 * phishy/dangerous/ malware sites
 * 
 * @author chetanit
 *
 */
public class MalwareSitesPageStatusTestcases extends BaseSetUpClass {

	protected static String expectedTitleForPhisingPage = properties.get("expectedTitlePhising");

	/**
	 * Verify elements in phising web page
	 * 
	 * @throws Exception
	 */
	public void verifyPhisingMessageOnPage() throws Exception {
		System.out.println(driver.getTitle());
		Assert.assertEquals(driver.getTitle(), expectedTitleForPhisingPage);
		Assert.assertTrue(driver.findElement(By.xpath(properties.get("notSafeWebPage"))).isDisplayed());
	}

	/**
	 * Method provides add exception to the web page and navigation to phishy
	 * /dangerous/malware sites
	 * 
	 * @throws Exception
	 */
	public void verifyingAddingExceptionOnMalwareSites() throws Exception {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		driver.findElement((By.xpath(properties.get("moreOption")))).click();
		driver.findElement((By.xpath(properties.get("addException")))).click();
		driver.findElement((By.xpath(properties.get("continueAnyWay")))).click();
		Assert.assertTrue(driver.findElement((By.xpath(properties.get("notSafeWebPage")))).isDisplayed());

	}

	/**
	 * Test provides a check of web page/source of a link is
	 * phishy/dangerous/malware sites
	 * 
	 * @throws Exception
	 */
	@Test
	private void verifyMalwareWebPageWithAviraAddons() throws Exception {
		driver.get(properties.get("BaseURL"));
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		verifyPhisingMessageOnPage();
		verifyingAddingExceptionOnMalwareSites();

	}
}
